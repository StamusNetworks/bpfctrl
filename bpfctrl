#!/usr/bin/env python3
# A bpftool wrapper to handle eBPF maps
# Copyright (C) 2019 Stamus Networks
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import argparse
import shutil
import sys

from bpfctrl import Ipv4, U32, MapIpv4, MapUniq


def ip_object(ip_str):
    """Convert a string an Ipv4 object and return it"""
    return Ipv4(ip_str)


def u32_object(val):
    """
        Transform a value (an string of uint 32) into an array of 4 str(int)
        corresponding of the value of each byte.
    """
    return U32(val)


def array_ip_u32_objects(ipval):
    """
        Convert a string into an IP address and the value associated.

        :param ipval: a string like 'ip=value'

        :return: an array like [ip, value] with ip an Ipv4 object and value a
                 U32 object
    """
    res = ipval.split('=')
    if len(res) == 1:
        res.append('')
    res[0] = ip_object(res[0])
    res[1] = u32_object(res[1])
    return res


def ip_subparser_creation(subparsers):
    """Add a parser dedicated at the eBPF map of ips in the subparsers."""
    des = {
        # parser
        'ipv4': 'Keys of the eBPF map are IPv4 addresses.',
        # action group help
        'actions-ip': 'At least one action is needed. Adding are done before\
                      removing. Dump and get are executed after.',
        # actions
        'add': 'Add all the ip adresses given in the eBPF map at the \
                associated values.',
        'remove': 'Remove all the ip adresses given in the eBPF map',
        'dump': 'Dump the eBPF map on stdout or in a file if <path> is \
                 precised.',
        'get': 'Check if the IP is present on the map. If it is, displays\
                its value.',
        # options
        'cpu': 'If dump or get options are activated, display the value for\
            each cpu. If the eBPF map have not these precision, do\
            nothing.',
        'json': 'Output and file created will be in JSON format.'
    }
    parser_ip = subparsers.add_parser('ipv4', help=des['ipv4'])
    actions_ip = parser_ip.add_argument_group(
        title='ACTIONS', description=des['actions-ip'])
    actions_ip.add_argument('-a', '--add', metavar=('IP=value'), nargs='+',
                            type=array_ip_u32_objects, default=[], help=des['add'])
    actions_ip.add_argument('-r', '--remove', metavar=('IP'), nargs='+',
                            type=ip_object, default=[],
                            help=des['remove'])
    actions_ip.add_argument('-d', '--dump', nargs='?', metavar=('<path>'),
                            default=False, help=des['dump'])
    actions_ip.add_argument('-g', '--get', nargs=1, metavar=('IP'),
                            type=ip_object, default=False, help=des['get'])
    parser_ip.add_argument('--cpu', action='store_true',
                           default=False, help=des['cpu'])
    parser_ip.add_argument('--json', action='store_true',
                           default=False, help=des['json'])


def uniq_subparser_creation(subparsers):
    """Add a parser dedicated at the eBPF map of one int in the subparsers."""
    des = {
        # parser
        'uniq': 'A map that contains one integer with a key 0.',
        # action group help
        'actions-uniq': 'At least one action is needed. Set is done before\
                        dump.',
        # actions
        'set': 'Set the map with the value given.',
        'dump': 'Dump the eBPF map on stdout or in a file if <path> is \
                 precised.',
        # options
        'json': 'Output and file created will be in JSON format.'
    }
    parser_uniq = subparsers.add_parser(
        'uniq', help=des['uniq'])
    actions_uniq = parser_uniq.add_argument_group(
        title='ACTIONS', description=des['actions-uniq'])
    actions_uniq.add_argument('-s', '--set', metavar=('value'),
                              nargs=1, default=[], type=u32_object,
                              help=des['uniq'])
    actions_uniq.add_argument('-d', '--dump', nargs='?', metavar=('<path>'),
                              default=False, help=des['dump'])
    parser_uniq.add_argument('--json', action='store_true',
                             default=False, help=des['json'])


def parser_creation():
    """
        Create a parser for the command line of the programm.

        :return: a parser
    """
    # messages display in the help
    des = {'help': 'Show this help message and exit.',
           'map': 'Path to the eBPF map.'
           }

    parser = argparse.ArgumentParser(
        usage='%(prog)s [--help] MAP TYPE ACTIONS',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
ACTIONS:
ip commands: --add, --get, --remove, --dump
uniq commands: --set, --dump

A detailed help for actions is available with:
bpfctrl -m MAP TYPE --help""")

    map_path = parser.add_argument_group(title='MAP')
    map_path.add_argument('-m', '--map', required=True,
                          nargs=1, help=des['map'])
    subparsers = parser.add_subparsers(dest='map_type', title='TYPE',
                                       prog='bpfctrl MAP',
                                       help='Type of the eBPF map.')
    ip_subparser_creation(subparsers)
    uniq_subparser_creation(subparsers)

    return parser


def arg_parse():
    """
        Parse the command line

        :return: arguments as Namespace [option:[args]/Boolean]
    """
    parser = parser_creation()
    args = parser.parse_args()

    if args.map_type is None:
        exit(parser.format_help())
    if (args.map_type == 'ipv4' and args.add == [] and args.remove == []
            and args.dump == False and args.get == False):
        exit(parser.format_help())
    elif (args.map_type == 'uniq' and args.dump == False
          and args.set == []):
        exit(parser.format_help())
    return args


def main():
    args = arg_parse()

    if shutil.which("bpftool") is None:
        sys.exit("Bpftool not found.")

    path_to_map = args.map[0]
    if args.map_type == 'ipv4':
        nemap = MapIpv4(path_to_map, args.json, args.cpu)
        nemap.add(args.add)
        nemap.remove(args.remove)
        if args.get != False:
            nemap.get(args.get[0])
        if args.dump != False:
            nemap.dump(args.dump)
    else:
        nemap = MapUniq(path_to_map, args.json)
        if args.set != []:
            nemap.set(args.set[0])
        if args.dump != False:
            nemap.dump(args.dump)


if __name__ == '__main__':
    main()
